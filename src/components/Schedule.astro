---
// Single-day workshops schedule (2nd Sunday of October 2025 -> Oct 12, 2025)
const schedulingData = [
  {
    date: "Sunday, October 12, 2025",
    day: "Sunday",
    // condensed event list to keep the visual section short
    events: [
      { time: "8:00 - 9:45", title: "Registration / Team creation", location: "Main Lobby" },
      { time: "9:45 - 10:00", title: "Opening Remarks", location: "Auditorium" },
      { time: "10:00 - 11:45", title: "Workshop Blocks (see room listings)", location: "Multiple Rooms" },
      { time: "12:00 - 12:45", title: "Lunch", location: "Cafeteria" },
      { time: "1:00 - 2:30", title: "Speaker Sessions / Mentorship", location: "Auditorium / Cafeteria" },
      { time: "2:30 - 5:30", title: "Hack / Build Time", location: "Classrooms & Labs" },
      { time: "5:30 - 6:00", title: "Project Demos & Judging", location: "Auditorium" },
      { time: "6:00 - 7:00", title: "Closing Ceremonies", location: "Auditorium" },
    ],
  },
];
---

<section
  class="flex flex-col items-center w-full bg-gradient-to-b from-[#052947] to-[#091f3d] text-white pt-16 "
  id="schedule"
>
  <!-- background decorations (medical-theme) -->
  <div class="background-decorations" aria-hidden="true">
    <!-- Each SVG uses currentColor so CSS controls opacity/color -->
    <svg class="decor-icon" id="decor1" viewBox="0 0 24 24" width="1em" height="1em" fill="currentColor"><circle cx="12" cy="12" r="10"/><path d="M11 7h2v4h4v2h-4v4h-2v-4H7v-2h4z" fill="currentColor"/></svg>
    <svg class="decor-icon" id="decor2" viewBox="0 0 24 24" width="1em" height="1em" fill="currentColor"><circle cx="12" cy="12" r="10"/><path d="M11 7h2v4h4v2h-4v4h-2v-4H7v-2h4z" fill="currentColor"/></svg>
    <svg class="decor-icon" id="decor3" viewBox="0 0 24 24" width="1em" height="1em" fill="currentColor"><circle cx="12" cy="12" r="10"/><path d="M11 7h2v4h4v2h-4v4h-2v-4H7v-2h4z" fill="currentColor"/></svg>
    <svg class="decor-icon" id="decor4" viewBox="0 0 24 24" width="1em" height="1em" fill="currentColor"><circle cx="12" cy="12" r="10"/><path d="M11 7h2v4h4v2h-4v4h-2v-4H7v-2h4z" fill="currentColor"/></svg>
    <svg class="decor-icon" id="decor5" viewBox="0 0 24 24" width="1em" height="1em" fill="currentColor"><circle cx="12" cy="12" r="10"/><path d="M11 7h2v4h4v2h-4v4h-2v-4H7v-2h4z" fill="currentColor"/></svg>
    <svg class="decor-icon" id="decor6" viewBox="0 0 24 24" width="1em" height="1em" fill="currentColor"><circle cx="12" cy="12" r="10"/><path d="M11 7h2v4h4v2h-4v4h-2v-4H7v-2h4z" fill="currentColor"/></svg>
    <svg class="decor-icon" id="decor7" viewBox="0 0 24 24" width="1em" height="1em" fill="currentColor"><circle cx="12" cy="12" r="10"/><path d="M11 7h2v4h4v2h-4v4h-2v-4H7v-2h4z" fill="currentColor"/></svg>
    <svg class="decor-icon" id="decor8" viewBox="0 0 24 24" width="1em" height="1em" fill="currentColor"><circle cx="12" cy="12" r="10"/><path d="M11 7h2v4h4v2h-4v4h-2v-4H7v-2h4z" fill="currentColor"/></svg>
    <svg class="decor-icon" id="decor9" viewBox="0 0 24 24" width="1em" height="1em" fill="currentColor"><circle cx="12" cy="12" r="10"/><path d="M11 7h2v4h4v2h-4v4h-2v-4H7v-2h4z" fill="currentColor"/></svg>
    <svg class="decor-icon" id="decor10" viewBox="0 0 24 24" width="1em" height="1em" fill="currentColor"><circle cx="12" cy="12" r="10"/><path d="M11 7h2v4h4v2h-4v4h-2v-4H7v-2h4z" fill="currentColor"/></svg>
    <svg class="decor-icon" id="decor11" viewBox="0 0 24 24" width="1em" height="1em" fill="currentColor"><circle cx="12" cy="12" r="10"/><path d="M11 7h2v4h4v2h-4v4h-2v-4H7v-2h4z" fill="currentColor"/></svg>
    <svg class="decor-icon" id="decor12" viewBox="0 0 24 24" width="1em" height="1em" fill="currentColor"><circle cx="12" cy="12" r="10"/><path d="M11 7h2v4h4v2h-4v4h-2v-4H7v-2h4z" fill="currentColor"/></svg>
    <svg class="decor-icon" id="decor13" viewBox="0 0 24 24" width="1em" height="1em" fill="currentColor"><circle cx="12" cy="12" r="10"/><path d="M11 7h2v4h4v2h-4v4h-2v-4H7v-2h4z" fill="currentColor"/></svg>
    <svg class="decor-icon" id="decor14" viewBox="0 0 24 24" width="1em" height="1em" fill="currentColor"><circle cx="12" cy="12" r="10"/><path d="M11 7h2v4h4v2h-4v4h-2v-4H7v-2h4z" fill="currentColor"/></svg>
    <svg class="decor-icon" id="decor15" viewBox="0 0 24 24" width="1em" height="1em" fill="currentColor"><circle cx="12" cy="12" r="10"/><path d="M11 7h2v4h4v2h-4v4h-2v-4H7v-2h4z" fill="currentColor"/></svg>
    <svg class="decor-icon" id="decor16" viewBox="0 0 24 24" width="1em" height="1em" fill="currentColor"><circle cx="12" cy="12" r="10"/><path d="M11 7h2v4h4v2h-4v4h-2v-4H7v-2h4z" fill="currentColor"/></svg>
    <svg class="decor-icon" id="decor17" viewBox="0 0 24 24" width="1em" height="1em" fill="currentColor"><circle cx="12" cy="12" r="10"/><path d="M11 7h2v4h4v2h-4v4h-2v-4H7v-2h4z" fill="currentColor"/></svg>
    <svg class="decor-icon" id="decor18" viewBox="0 0 24 24" width="1em" height="1em" fill="currentColor"><circle cx="12" cy="12" r="10"/><path d="M11 7h2v4h4v2h-4v4h-2v-4H7v-2h4z" fill="currentColor"/></svg>
    <svg class="decor-icon" id="decor19" viewBox="0 0 24 24" width="1em" height="1em" fill="currentColor"><circle cx="12" cy="12" r="10"/><path d="M11 7h2v4h4v2h-4v4h-2v-4H7v-2h4z" fill="currentColor"/></svg>
    <svg class="decor-icon" id="decor20" viewBox="0 0 24 24" width="1em" height="1em" fill="currentColor"><circle cx="12" cy="12" r="10"/><path d="M11 7h2v4h4v2h-4v4h-2v-4H7v-2h4z" fill="currentColor"/></svg>
    <svg class="decor-icon" id="decor21" viewBox="0 0 24 24" width="1em" height="1em" fill="currentColor"><circle cx="12" cy="12" r="10"/><path d="M11 7h2v4h4v2h-4v4h-2v-4H7v-2h4z" fill="currentColor"/></svg>
    <svg class="decor-icon" id="decor22" viewBox="0 0 24 24" width="1em" height="1em" fill="currentColor"><circle cx="12" cy="12" r="10"/><path d="M11 7h2v4h4v2h-4v4h-2v-4H7v-2h4z" fill="currentColor"/></svg>
    <svg class="decor-icon" id="decor23" viewBox="0 0 24 24" width="1em" height="1em" fill="currentColor"><circle cx="12" cy="12" r="10"/><path d="M11 7h2v4h4v2h-4v4h-2v-4H7v-2h4z" fill="currentColor"/></svg>
    <svg class="decor-icon" id="decor24" viewBox="0 0 24 24" width="1em" height="1em" fill="currentColor"><circle cx="12" cy="12" r="10"/><path d="M11 7h2v4h4v2h-4v4h-2v-4H7v-2h4z" fill="currentColor"/></svg>
    <svg class="decor-icon" id="decor25" viewBox="0 0 24 24" width="1em" height="1em" fill="currentColor"><circle cx="12" cy="12" r="10"/><path d="M11 7h2v4h4v2h-4v4h-2v-4H7v-2h4z" fill="currentColor"/></svg>
    <svg class="decor-icon" id="decor26" viewBox="0 0 24 24" width="1em" height="1em" fill="currentColor"><circle cx="12" cy="12" r="10"/><path d="M11 7h2v4h4v2h-4v4h-2v-4H7v-2h4z" fill="currentColor"/></svg>
  </div>
  <div class="flex place-content-center items-center px-4 tablet:px-[10%]">
    <h1 class="text-4xl font-bold text-center">ðŸ“… Schedule</h1>
  </div>

  <div
    class="flex flex-col desktop:flex-row justify-center my-6 gap-12 px-4 tablet:px-[15%] desktop:px-[2%]"
  >
    {
      schedulingData.map((day) => (
        <div class= "max-w-full flex flex-1 py-6 px-6 tablet:px-12 pb-8 bg-cover bg-[url('../schedback.svg')]">
          <div class=" font-poppin flex-col flex text-white border-none ">
            <h1 class="text-2xl font-[700] pt-6 text-center">{day.date}</h1>
            <h1 class="font-poppin mb-3 text-xl font-[500] text-center">
              {day.day}
            </h1>

            {/* Placeholder */}
            {/* <div class="flex flex-col justify-center h-[100%]">
              <h1 class="text-9xl text-center ">ðŸš§</h1>
              <h1 class="text-5xl text-center pt-5">TBD</h1>
            </div> */}
            <div class="flex flex-col gap-3">
              {day.events.map((event) => (
                <p class="text-base">
                  <span class="font-extrabold text-lg">{event.title}</span>
                  <br>
                  <span class="text-sm">{event.time}</span> - <span class="text-[#53B8F4]">{event.location}</span>

                </p>
              ))}
            </div>
          </div>
          {/* <div class= "flex" id="mini-jelly"></div> */}
        </div>
      ))
    }
    <!-- <div class= "flex animate-bob-fast" id="mini-jelly"></div> -->
  </div>
</section>

<style>
  #mini-jelly{
    position: relative;
    background: url('../minijelly.svg');
   width: 75px;
   height: 75px;
   background-repeat: no-repeat;
   background-size: 75px;
   margin: 35px;
  }

  /* Background decorations for schedule (medical/sea theme) */
  /* ensure schedule is a positioned stacking context so decorations sit behind content but above background */
  #schedule{ position: relative; }
  .background-decorations{ position:absolute; inset:0; z-index:0; pointer-events:none; }
  .decor-icon{ position:absolute; color: rgba(255,255,255,0.07); transition: all .25s ease; transform-origin: center center; }

  /* make sure content sits above decorations */
  #schedule > * { position: relative; z-index: 1; }

  /* left side (condensed & smaller) */
  #decor1 { top: 6%; left: 12%; font-size: 40px; transform: translate(-50%,-50%) rotate(-20deg); }
  #decor2 { top: 14%; left: 6%; font-size: 32px; transform: translate(-50%,-50%) rotate(12deg); }
  #decor3 { top: 24%; left: 10%; font-size: 52px; transform: translate(-50%,-50%) rotate(8deg); }
  #decor4 { top: 36%; left: 6%; font-size: 45px; transform: translate(-50%,-50%) rotate(-8deg); }
  #decor5 { top: 50%; left: 14%; font-size: 36px; transform: translate(-50%,-50%) rotate(18deg); }
  #decor6 { top: 64%; left: 6%; font-size: 42px; transform: translate(-50%,-50%) rotate(4deg); }
  #decor7 { top: 78%; left: 16%; font-size: 30px; transform: translate(-50%,-50%) rotate(-12deg); }
  /* right side (condensed & smaller) */
  #decor11 { top: 8%; right: 12%; font-size: 60px; transform: translate(-50%,-50%) rotate(12deg); }
  #decor12 { top: 20%; right: 6%; font-size: 45px; transform: translate(-50%,-50%) rotate(-16deg); }
  #decor13 { top: 32%; right: 13%; font-size: 40px; transform: translate(-50%,-50%) rotate(8deg); }
  #decor14 { top: 46%; right: 6%; font-size: 52px; transform: translate(-50%,-50%) rotate(4deg); }
  #decor15 { top: 62%; right: 6%; font-size: 42px; transform: translate(-50%,-50%) rotate(-12deg); }
  #decor16 { top: 76%; right: 14%; font-size: 36px; transform: translate(-50%,-50%) rotate(20deg); }
  #decor17 { top: 86%; right: 8%; font-size: 45px; transform: translate(-50%,-50%) rotate(-8deg); }
  #decor18 { top: 6%; right: 6%; font-size: 40px; transform: translate(-50%,-50%) rotate(-4deg); }
  #decor19 { top: 68%; right: 8%; font-size: 34px; transform: translate(-50%,-50%) rotate(14deg); }
  #decor20 { top: 54%; right: 16%; font-size: 26px; transform: translate(-50%,-50%) rotate(18deg); }
  #decor23 { top: 28%; right: 16%; font-size: 34px; transform: translate(-50%,-50%) rotate(-20deg); }
  #decor24 { top: 92%; right: 6%; font-size: 30px; transform: translate(-50%,-50%) rotate(12deg); }
  #decor26 { top: 82%; right: 16%; font-size: 30px; transform: translate(-50%,-50%) rotate(-8deg); }
    /* Remove rigid per-id placement; run client script to disperse icons randomly */
    .decor-icon { will-change: transform, top, left, right, opacity; }

    /* On narrow screens keep decorations small */
    @media (max-width: 768px) {
      .decor-icon { opacity: 0.06; }
    }
  </style>

  <script type="module">
    // Randomly disperse decoration icons into left/right gutters,
    // keeping them away from the central content area.
    function rand(min, max) { return Math.random() * (max - min) + min; }

    function placeIcons() {
      const icons = Array.from(document.querySelectorAll('.background-decorations .decor-icon'));
      if (!icons.length) return;
      icons.forEach((el, i) => {
        // choose side deterministically from index to keep spread
        const side = (i % 2 === 0) ? 'left' : 'right';

        // vertical range: avoid top 6% and bottom 6% to prevent overflow
        const top = rand(8, 88);

        // horizontal gutter ranges (percent)
        const leftRange = [2, 18];
        const rightRange = [2, 18];

        // random size and rotation
        const size = Math.floor(rand(22, 60));
        const rot = Math.floor(rand(-30, 30));

        el.style.position = 'absolute';
        el.style.top = top + '%';
        el.style.fontSize = size + 'px';
        el.style.transform = `translate(-50%,-50%) rotate(${rot}deg)`;
        el.style.opacity = (Math.random() * 0.06 + 0.04).toString();

        if (side === 'left') {
          const left = rand(leftRange[0], leftRange[1]);
          el.style.left = left + '%';
          el.style.right = 'auto';
        } else {
          const right = rand(rightRange[0], rightRange[1]);
          el.style.right = right + '%';
          el.style.left = 'auto';
        }
      });
    }

    // Place on load and when resizing (debounced)
    window.addEventListener('load', placeIcons);
    let t;
    window.addEventListener('resize', () => { clearTimeout(t); t = setTimeout(placeIcons, 200); });
  </script>
</style>
